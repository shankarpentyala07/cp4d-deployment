#!/usr/bin/env groovy

def gv

pipeline {
    agent any

        parameters {
        string(name: 'region', defaultValue: 'us-west-2', description: 'The region to deploy the cluster in, e.g: us-west-2.')
        string(name: 'az', defaultValue: 'single_zone', description: 'single_zone / multi_zone')
        password (name: 'AWS_ACCESS_KEY_ID')
        password (name: 'AWS_SECRET_ACCESS_KEY')
        password (name: 'ROSA_TOKEN')
        string(name: 'cluster_name', defaultValue: 'cpd-test', description: 'Cluster Name')
        string(name: 'worker_machine_type', defaultValue: 'm5.4xlarge', description: 'Worker Nodes Instance Type')
        string(name: 'worker_machine_count', defaultValue: '6', description: 'No of worker nodes')
        choice(name: 'private_cluster', choices: ['false','true'], description: 'Endpoints should resolve to Private IPs')  
        choice(name: 'ocs_storage_enable', choices: ['true','false'], description: 'Enable OCS Storage')
        string(name: 'ocs_storage_instance_type', defaultValue: 'm5.4xlarge', description: 'OCS Storage Instance type')
        string(name: 'cpd_api_key', defaultValue: '', description: 'Repository APIKey or Registry password')
        string(name: 'cpd_external_registry', defaultValue: 'cp.icr.io', description: 'URL to external registry for CPD install. Note: CPD images must already exist in the repo')
        string(name: 'cpd_external_username', defaultValue: 'cp', description: 'URL to external username for CPD install. Note: CPD images must already exist in the repo')
        choice(name: 'accept_cpd_license', choices: ['accept','reject'], description: 'Read and accept license at https://www14.software.ibm.com/cgi-bin/weblap/lap.pl?li_formnum=L-DNAA-BZTPEW, (accept / reject)')
        choice(name: 'cpd_platform_enable', choices: ['yes','no'], description: 'Install cpd platform (yes/ no)')
        choice(name: 'watson_knowledge_catalog_enable', choices: ['no','yes'], description: 'Install WKC (yes/ no)') 
        choice(name: 'data_virtualization_enable', choices: ['no','yes'], description: 'Install DV service (yes/ no)') 
        choice(name: 'analytics_engine_enable', choices: ['no','yes'], description: 'Install Analytics Engine service (yes/ no)') 
        choice(name: 'watson_studio_enable', choices: ['no','yes'], description: 'Install WSL service (yes/ no)') 
        choice(name: 'watson_machine_learning_enable', choices: ['no','yes'], description: 'Install WML service (yes/ no)') 
        choice(name: 'watson_ai_openscale_enable', choices: ['no','yes'], description: 'Install openscale service (yes/ no)') 
        choice(name: 'spss_modeler_enable', choices: ['no','yes'], description: 'Install SPSS service (yes/ no)') 
        choice(name: 'cognos_dashboard_embedded_enable', choices: ['no','yes'], description: 'Install Cognos Dashboard Embedded service(yes/ no)') 
        choice(name: 'datastage_enable', choices: ['no','yes'], description: 'Install Datastage service(yes/ no)') 
        choice(name: 'db2_warehouse_enable', choices: ['no','yes'], description: 'Install Db2wh service (yes/ no)')  
        choice(name: 'db2_oltp_enable', choices: ['no','yes'], description: 'Install db2oltp service (yes/ no)')
        choice(name: 'cognos_analytics_enable', choices: ['no','yes'], description: 'Install CA service (yes/ no)')
        choice(name: 'master_data_management_enable', choices: ['no','yes'], description: 'Install MDM service (yes/ no)')
        choice(name: 'decision_optimization_enable', choices: ['no','yes'], description: 'Install DO service(yes/ no)')
        choice(name: 'planning_analytics_enable', choices: ['no','yes'], description: 'Install PA service(yes/ no)')
        choice(name: 'bigsql_enable', choices: ['no','yes'], description: 'Install bigsql service (yes/ no)')    
    }

    environment {
                access_key_id     = "${params.AWS_ACCESS_KEY_ID}"
                secret_access_key = "${params.AWS_SECRET_ACCESS_KEY}"
                rosa_token = "${params.ROSA_TOKEN}"
    }

    stages {
        stage('Initalize') {
            steps {
               script {
                   gv = load "managed-openshift/aws/terraform/script.groovy"
                   gv.tfInitalize()
               }
            }
        }

        stage('Plan') {
            steps {
               script {
                  gv.tfPlan()
               }
            }
        }

        stage('Apply') {
            steps {
               script {
                   gv.tfApply()
               }
            }
        }

        // stage('Destroy') {
        //     steps {
        //        script {
        //            gv.tfDestroy()
        //        }
        //     }
        // }
    }

    post {
        always{
                script {
                    echo 'Performing terraform destroy'
                   gv.tfDestroy()
               }
        }
    }
}

